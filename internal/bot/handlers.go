package bot

import (
	"fmt"
	"strings"
	"time"

	"github.com/korsakov-kuzjma/chatan/internal/config"
	"gopkg.in/telebot.v3"
)

func (b *Bot) registerHandlers() {
	b.tgBot.Handle("/start", b.handleStart)
	b.tgBot.Handle("/help", b.handleHelp)
	b.tgBot.Handle("/meeting", b.handleMeetingInfo)
	b.tgBot.Handle(telebot.OnUserJoined, b.handleUserJoined)

	adminGroup := b.tgBot.Group()
	adminGroup.Use(b.requireAdmin)
	adminGroup.Handle("/admin", b.handleAdminHelp)
	adminGroup.Handle("/set_schedule", b.handleSetSchedule)
	adminGroup.Handle("/set_invitation", b.handleSetInvitation)
	adminGroup.Handle("/set_reminder", b.handleSetReminder)
	adminGroup.Handle("/set_link", b.handleSetStreamLink)
	adminGroup.Handle("/stats", b.handleStats)
	adminGroup.Handle("/participants", b.handleParticipantsList)
}

func (b *Bot) requireAdmin(next telebot.HandlerFunc) telebot.HandlerFunc {
	return func(c telebot.Context) error {
		for _, adminID := range b.cfg.Telegram.AdminIDs {
			if c.Sender().ID == adminID {
				return next(c)
			}
		}
		return c.Send("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
}

func (b *Bot) handleStart(c telebot.Context) error {
	return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –ê–Ω–æ–Ω–∏–º–Ω—ã—Ö –ù–∞—Ä–∫–æ–º–∞–Ω–æ–≤!")
}

func (b *Bot) handleHelp(c telebot.Context) error {
	return c.Send(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/meeting - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ`)
}

func (b *Bot) handleMeetingInfo(c telebot.Context) error {
	if len(b.cfg.Meeting.Schedule) == 0 {
		return c.Send("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	}

	next := b.cfg.Meeting.Schedule[0]
	msg := fmt.Sprintf("–°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞: %s –≤ %s", next.Day, next.Time)

	if b.cfg.Meeting.StreamLink != "" {
		msg += fmt.Sprintf("\n–°—Å—ã–ª–∫–∞: %s", b.cfg.Meeting.StreamLink)
	}

	return c.Send(msg)
}

func (b *Bot) handleUserJoined(c telebot.Context) error {
	user := c.Sender()
	b.meeting.AddParticipant(user.ID, user.Username)
	b.stats.RecordAttendance(user.ID, user.Username, time.Now(), false)

	text := strings.ReplaceAll(b.cfg.Meeting.InvitationText,
		"{–≤—Ä–µ–º—è}", b.cfg.Meeting.Schedule[0].Time)
	text = strings.ReplaceAll(text, "{—Å—Å—ã–ª–∫–∞}", b.cfg.Meeting.StreamLink)

	return c.Send(fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!\n%s", user.FirstName, text))
}

func (b *Bot) handleAdminHelp(c telebot.Context) error {
	return c.Send(`–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/set_schedule <–¥–µ–Ω—å –≤—Ä–µ–º—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/set_invitation <—Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
/set_reminder <–≤—Ä–µ–º—è> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/set_link <url> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
/participants - –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`)
}

func (b *Bot) handleSetSchedule(c telebot.Context) error {
	args := strings.Fields(c.Message().Payload)
	if len(args) < 2 {
		return c.Send("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_schedule <–¥–µ–Ω—å> <–≤—Ä–µ–º—è>\n–ü—Ä–∏–º–µ—Ä: /set_schedule Tuesday 19:00")
	}

	b.cfg.Meeting.Schedule = []config.MeetingSchedule{
		{Day: args[0], Time: args[1]},
	}

	if err := config.Save(b.cfg); err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + err.Error())
	}

	b.scheduleMeetings()
	return c.Send("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
}

func (b *Bot) handleSetInvitation(c telebot.Context) error {
	newText := c.Message().Payload
	if newText == "" {
		return c.Send("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
	}

	b.cfg.Meeting.InvitationText = newText
	if err := config.Save(b.cfg); err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + err.Error())
	}

	return c.Send("–¢–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
}

func (b *Bot) handleSetReminder(c telebot.Context) error {
	duration, err := time.ParseDuration(c.Message().Payload)
	if err != nil {
		return c.Send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1h –∏–ª–∏ 30m")
	}

	b.cfg.Meeting.ReminderBefore = duration
	if err := config.Save(b.cfg); err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + err.Error())
	}

	b.scheduleMeetings()
	return c.Send(fmt.Sprintf("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ %s –¥–æ –≤—Å—Ç—Ä–µ—á–∏", duration))
}

func (b *Bot) handleSetStreamLink(c telebot.Context) error {
	newLink := c.Message().Payload
	if newLink == "" {
		return c.Send("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é")
	}

	b.cfg.Meeting.StreamLink = newLink
	if err := config.Save(b.cfg); err != nil {
		return c.Send("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + err.Error())
	}

	return c.Send("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
}

func (b *Bot) handleStats(c telebot.Context) error {
	stats := b.stats.GetGeneralStats()
	if len(stats) == 0 {
		return c.Send("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
	}

	msg := "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:\n"
	for user, count := range stats {
		msg += fmt.Sprintf("- %s: %d –≤—Å—Ç—Ä–µ—á\n", user, count)
	}

	return c.Send(msg)
}

func (b *Bot) handleParticipantsList(c telebot.Context) error {
	participants := b.meeting.GetParticipants()
	if len(participants) == 0 {
		return c.Send("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
	}

	msg := "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
	for _, p := range participants {
		msg += fmt.Sprintf("- @%s (—Å %s)\n",
			p.Username, p.JoinedAt.Format("02.01.2006"))
	}

	return c.Send(msg)
}

func (b *Bot) scheduleMeetings() {
	if b.scheduleJob != nil {
		b.scheduleJob.Stop()
	}

	if len(b.cfg.Meeting.Schedule) == 0 {
		return
	}

	// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
}
